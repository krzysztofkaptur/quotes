name: Deploy Goals Frontend
on:
  push:
    branches:
      - "master"
  workflow_dispatch:
  workflow_call:
    secrets: 
      DOCKER_HUB_USERNAME:
        required: true
      DOCKER_HUB_PASSWORD:
        required: true

env:
  # general
  AWS_REGION: eu-north-1       
  ECS_CLUSTER: arn:aws:ecs:eu-north-1:381492012543:cluster/quotes-cluster 
  
  # client
  IMAGE_NAME_FRONTEND: quotes_client
  ECS_SERVICE_FRONTEND: arn:aws:ecs:eu-north-1:381492012543:service/quotes-cluster/quotes-client-service     
  ECS_TASK_DEFINITION_FRONTEND: aws/client.json 
  CONTAINER_IMAGE_FRONTEND: jakiscwaniak/quotes_client
  CONTAINER_NAME_FRONTEND: quotes-client

  # api
  IMAGE_NAME_BACKEND: quotes_api
  ECS_SERVICE_BACKEND: arn:aws:ecs:eu-north-1:381492012543:service/quotes-cluster/quotes-api-service
  ECS_TASK_DEFINITION_BACKEND: aws/api.json
  CONTAINER_IMAGE_BACKEND: jakiscwaniak/quotes_api
  CONTAINER_NAME_BACKEND: quotes-api

defaults:
  run:
    shell: bash
jobs:
  deploy_frontend:
    name: Deploy frontend
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    environment: sample
    defaults:
      run:
        working-directory: client
    env:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./client
          file: ./client/Dockerfile.prod
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME_FRONTEND }}:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_FRONTEND }}
          container-name: ${{ env.CONTAINER_NAME_FRONTEND }}
          image: ${{ env.CONTAINER_IMAGE_FRONTEND }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_FRONTEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Force deployment
        run: aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE_FRONTEND }} --force-new-deployment

  deploy_backend:
    name: Deploy backend
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    environment: sample
    defaults:
      run:
        working-directory: api
    env:
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile.prod
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME_BACKEND }}:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_BACKEND }}
          container-name: ${{ env.CONTAINER_NAME_BACKEND }}
          image: ${{ env.CONTAINER_IMAGE_BACKEND }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_BACKEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Force deployment
        run: aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE_BACKEND }} --force-new-deployment